"use client";
import "datatables.net-dt/css/dataTables.dataTables.min.css";
import "datatables.net-buttons-dt/css/buttons.dataTables.css"; // Buttons CSS
import $ from "jquery"
import Swal from 'sweetalert2'

import { useCallback, useEffect, useMemo, useRef, useState } from "react";
import { ToastContainer, toast } from "react-toastify";
import Checkbox from "../FormElements/Checkboxes/Checkbox";

import DoubleRangeSlider from "../Slider/MultiRangeSlider";
import dayjs from "dayjs";
import { debounce, throttle } from "lodash";
import dynamic from "next/dynamic";
import { DataTableRef } from "datatables.net-react";
import { Select } from "../FormElements/select";
import { GlobeIcon } from "@/assets/icons";

const DataTable = dynamic(
    async () => {
        const dtReact = import("datatables.net-react");

        const dtNet = import(`datatables.net-dt`);

        const [reactMod, dtNetMod] = await Promise.all([dtReact, dtNet]);

        reactMod.default.use(dtNetMod.default);

        return reactMod.default;
    },
    { ssr: false }
);

function _formatString(str: string) {
    str = str.toLowerCase();
    str = str.replace(/√†|√°|·∫°|·∫£|√£|√¢|·∫ß|·∫•|·∫≠|·∫©|·∫´|ƒÉ|·∫±|·∫Ø|·∫∑|·∫≥|·∫µ/g, "a");
    str = str.replace(/√®|√©|·∫π|·∫ª|·∫Ω|√™|·ªÅ|·∫ø|·ªá|·ªÉ|·ªÖ/g, "e");
    str = str.replace(/√¨|√≠|·ªã|·ªâ|ƒ©/g, "i");
    str = str.replace(/√≤|√≥|·ªç|·ªè|√µ|√¥|·ªì|·ªë|·ªô|·ªï|·ªó|∆°|·ªù|·ªõ|·ª£|·ªü|·ª°/g, "o");
    str = str.replace(/√π|√∫|·ª•|·ªß|≈©|∆∞|·ª´|·ª©|·ª±|·ª≠|·ªØ/g, "u");
    str = str.replace(/·ª≥|√Ω|·ªµ|·ª∑|·ªπ/g, "y");
    str = str.replace(/ƒë/g, "d");
    return str;
}

export default function AdvanceFindProductAndEditStock() {
    const dataTableRef = useRef<DataTableRef>(null);


    const reloadData = useCallback(
        debounce(() => {
            dataTableRef.current?.dt()?.ajax.reload();
        }, 1000),
        []
    );

    const handleUpdateStock = async (productId: string, newStockQuantity: number) => {
        try {
            const response = await fetch(`/api/products/${productId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ stockQuantity: newStockQuantity }),
            });

            // if (response.ok) {
            //     // C·∫≠p nh·∫≠t giao di·ªán ng∆∞·ªùi d√πng sau khi c·∫≠p nh·∫≠t th√†nh c√¥ng
            //     setProducts(products.map(product => {
            //         if (product.id === productId) {
            //             return { ...product, stockQuantity: newStockQuantity };
            //         }
            //         return product;
            //     }));
            //     alert('S·ªë l∆∞·ª£ng t·ªìn kho ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!');
            // } else {
            //     alert('L·ªói c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho.');
            // }
        } catch (error) {
            console.error(error);
            alert('ƒê√£ x·∫£y ra l·ªói.');
        }
    };

    const ajaxDataFunc = useRef((d: any) => {
        if (d?.search?.value) {
            d.search.value = _formatString(d.search.value);
        }
        return JSON.stringify(d); // Convert DataTables data to JSON format
    }).current;

    const options = useMemo(() => {
        return {
            order: [],
            scrollCollapse: true,
            scrollY: "200",
            scrollX: true,
            orderMulti: true,
            serverSide: true,
            columns: [
                {
                    name: "name",
                    data: "name",
                    // orderData: [0]
                },
                {
                    data: "category",
                    name: "category",
                    // orderData: [0]
                },
                {
                    data: "description",
                    name: "description",
                    // orderData: [0]
                },
                {
                    name: "price",
                    data: "price",
                    render: function (data: any, type: any, row: any) {
                        return new Intl.NumberFormat("vi-VN", {
                            style: "currency",
                            currency: "VND",
                            maximumFractionDigits: 9,
                        }).format(data);
                    },
                    // orderData: [0]
                },
                {
                    name: "stock",
                    data: "stock",
                    // render: function (data: any, type: any, row: any) {
                    //     return new Intl.NumberFormat("vi-VN", {
                    //         style: "currency",
                    //         currency: "VND",
                    //         maximumFractionDigits: 9,
                    //     }).format(data);
                    // },
                    // orderData: [0]
                },
                {
                    data: '_id',
                    title: 'Actions',
                    render: function (data: any, type: any, row: any) {
                        return `
                        <button class="edit-btn inline-flex items-center justify-center gap-2.5 text-center font-medium hover:bg-opacity-90 font-medium transition focus:outline-none bg-primary text-white rounded-full py-3.5 px-10 py-3.5 lg:px-8 xl:px-10" data-id="${row._id}" data-stock="${row.stock}">S·ª≠a</button>
                      `;
                    },
                },
            ],
            drawCallback: function (settings: any) {

                $('.edit-btn').on('click', async function () {
                    const id = $(this).data('id');
                    const stock = $(this).data('stock');
                    console.log('S·ª≠a ID:', id);
                    //Th√™m logic x·ª≠ l√Ω S·ª≠a ·ªü ƒë√¢y.
                    const { value } = await Swal.fire({
                        title: "C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng",
                        input: "number",
                        inputLabel: "S·ªë l∆∞·ª£ng c·∫ßn c·∫≠p nh·∫≠t",
                        inputValue: stock,
                        showCancelButton: true,
                        inputValidator: (value) => {
                            if (Number(value) < 0) return "Vui l√≤ng nh·∫≠p d·ªØ li·ªáu ch√≠nh x√°c "
                            if (!value) {
                                return "Vui l√≤ng ƒëi·ªÅn d·ªØ li·ªáu!";
                            }
                        }
                    });
                    if (Number(value) >= 0) {
                        const updateData = {
                            "productId": id,
                            "currentStock": stock,
                            "updateStock": Number(value) - stock
                        }

                        const response = await fetch(`/api/product/updateProductStock`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(updateData),
                        });
                        console.log("üöÄ ~ response:", response)
                        const result = await response.json()
                        if (result.success) {
                            Swal.fire({
                                title: "C·∫≠p nh·∫≠t th√†nh c√¥ng!",
                                icon: "success",
                            });
                            dataTableRef.current?.dt()?.ajax.reload(undefined, false)
                        } else {
                            Swal.fire({
                                title: "C·∫≠p nh·∫≠t th·∫•t b·∫°i!",
                                icon: "success",
                            });
                        }

                    }
                });
            },
            ajax: {
                url: "/api/product/advanceFind",
                dataSrc: "data",
                type: "POST", // Can also be GET depending on your server implementation
                contentType: "application/json",
                data: ajaxDataFunc,
            },
            language: {
                decimal: "",
                emptyTable: "No data available in table",
                info: "Hi·ªÉn th·ªã t·ª´ _START_ ƒë·∫øn _END_ tr√™n t·ªïng _TOTAL_ d·ªØ li·ªáu",
                infoEmpty: "Showing 0 to 0 of 0 entries",
                infoFiltered: "(l·ªçc t·ª´ _MAX_ t·ªïng s·ªë d·ªØ li·ªáu)",
                infoPostFix: "",
                thousands: ",",
                lengthMenu: "Hi·ªán _MENU_ d·ªØ li·ªáu",
                loadingRecords: "ƒêang t·∫£i...",
                processing: "",
                search: "",
                zeroRecords: "No matching records found",
                paginate: {
                    first: "Trang ƒë·∫ßu",
                    last: "Trang cu·ªëi",
                    next: "Trang k·∫ø",
                    previous: "Trang tr∆∞·ªõc",
                },
                searchPlaceholder: "T√¨m ki·∫øm t∆∞∆°ng ƒë·ªëi theo t√™n, danh m·ª•c v√† m√¥ t·∫£",
                aria: {
                    // "orderable": "Order by this column",
                    // "orderableReverse": "Reverse order this column"
                },
            },
            layout: {
                topEnd: {
                    search: {
                        processing: true,
                    },
                },
                topStart: {
                    pageLength: {},
                    // buttons: [
                    //     {
                    //         extend: 'collection',
                    //         text: 'Xu·∫•t d·ªØ li·ªáu',
                    //         buttons: ['copy', 'excel', 'csv', 'pdf', 'print'],
                    //         enabled: true
                    //     }
                    // ]
                },
            },
            paging: true,
            processing: true,
            searchDelay: 300,

        };
    }, []);

    useEffect(() => {
        dataTableRef.current?.dt()?.on('click', 'tbody td', function () {
            dataTableRef.current?.dt()?.cell(this)
        });
    }, [])

    return (
        <div className="overflow-x-auto">

            <DataTable
                key="myTable"
                ref={dataTableRef}
                className="w-full table-auto break-words md:overflow-auto md:px-8"
                options={options}
            >
                <thead>
                    <tr>
                        <th>T√™n</th>
                        <th>Danh m·ª•c</th>
                        <th>N·ªôi dung</th>
                        <th>Gi√°</th>
                        <th>T·ªìn kho</th>
                        <th>C·∫≠p nh·∫≠t t·ªìn kho</th>
                    </tr>
                </thead>
            </DataTable>

            <ToastContainer stacked aria-label={""} />
        </div>
    );
}